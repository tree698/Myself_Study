< JavaScript 탄생 배경 >

1993년 UI 요소가 가미된 MOSAIC Web Browser가 출시됨
1994년 MOSAIC Web Browser를 개발한 Marc Andreessen이 Netscape 설립하여 Netscape Navigator Browser를 출시함 
  - HTML / CSS릉 이용한 정적 웹사이트였음
  - 이후, 동적 웹사이트를 만들기 위해 script 언어를 추가하기로 함
  - 그래서, Brendan Eich를 스카우트하여 scheme script를 수정하여 Mocha를 만들었고, 이후 LiveScript로 이름을 바꿈
  - 따라서, Netscape Navigator Browser에는 LiveScript를 이해하는 Intepreter가 탑재됨
  - 당시, Java 인기에 편승하기 위해 JavaScript로 이름을 바꿈 

1995년 Netscape Navigator Browser에 JavaScript Intepreter를 탑재하여 공식 출시함
1995년 Microsoft는 JavaScrit를 reverse engineering (소스 코드 분석)하여 JScript를 만들었고 Internet Explorer Browser에 JScript를 이해하는 Intepreter를 탑재하여 출시함

==> 모든 Browser에 동작하는 웹사이트를 만들어야 했고 이로 인해 개발자의 고통이 시작됨

1996년 Netscape는 ECMA International에 JavaScript를 표준으로 할것을 제안했고,
1997년 ECMAScript 1 language specification이 탄생하였고 추후 새로운 버전이 추가적으로 만들어짐
  - 특히 ECMAScript 4부터 class 등 다양한 아이디어가 제안됨 

2000년 Microsoft는 Internet Explorer의 시장 점유율이 90%를 넘어서면서 ECMAScript 표준안에 참여하지 않고 독자 노선을 걷기 시작함
  - 그래서 표준화가 더디게 진행됨

2004년 mozilla에서 Firefox 출시 
  - mozilla는 ActionScript3와 Tamarin 엔진을 가지고 ECMA에게 표준화 검토를 제안했으나, 기존 엔진과 너무 달라 받아들여지지 않음 

==> 이후, Netescape / Microsoft / mozilla 간에 표준화 신경전이 벌어짐

(당시, 웹 시장에서는...)
  - Jesse James Garrett는 비동기적으로 서버에서 데이터를 받고 처리할수 있는 기술인 AJAX (Asynchronous JavaScript and XML) 개발 
  - 오페라 Browser 등 다른 Browser들이 출시됨
  - 웹시장 커지면서 강력한 커뮤니티가 탄생됨 
  - jQuery, dojo, mootoos가 등장하면서 API를 통해 다양한 웹 Browser에서 모두 작동하도록 하는 편리성을 제공함 

2008년 Google은 JIT (Just-in-time compilation)를 포함하여 JavaScript 실행 속도를 향상시킨 Chrome 브라 Browser를 출시함
  => Google에 자극을 받은 경쟁사들은 통합을 논의하기시작했고...

2009년 ECMAScript 5 탄생 
2015년 ECMAScript 6 탄생 => class, arrowfunction, const, let 등 포함
  - 이후 매년 수정본이 나오지만 ECMAScript 5 & 6에서 대부분 정의됨



----------------------------------
< 최근 동향... >

(1) 각 브라우저는 ECMAScript를 준용하는 다양한 엔진이 있음
  - Chrome (V8), Firefox (SpiderMonkey), Safari (JSCore), MS Edge (Chakra), Opera (Charakan), Adobe Flash (Tamarin)
  - Chrome (V8)는 node.js, ELECTRON에서도 사용 

(2) 개발자들은 최신 버전의 ECMAScript (TypeScript)로 개발하고 배포할때는 BABEL같은 JavaScript transcompiler를 사용하여 ECMAScript 5 & 6에 맞도록 변경함

(3) JavaScript만으로도 SPA 구현이 가능하지만, SPA를 좀더 쉽게 구현하기 휘애 React, NGULAR, Backborn, View가 출시됨
  - SPA (Single Page Application) : 한 페이지에서 데이터를 받아 와서 필요한 부분만 부분적으로 업데이트함

(4) ECMAScript 표준화와 V8과 같은 강력한 JavaScript 엔진 덕분에 node.js가 등장함
  - node.js에는 JavaScript 엔진(V8)이 있어서 브라우저 없이도 명령프롬프트에서 JavaScript를 실행할 수 있음
  - node.js는 V8을 이용하여 backend에서 서비스를 구현할 수 있고, mobile/desktop application도 만들 수 있음  

(5) 웹에서 동작할 수 있는 언어는 JavaScript이지만, 최근 WA(Web Assembly)가 등장 
  - WA는 다양한 언어(C#, C++, python 등)를 이용해 웹 어플리케이션을 만드는 것을 가능케함


/END/


